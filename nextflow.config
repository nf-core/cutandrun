/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/cutandrun Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

/*
*** Flow switching and result output ***
There are three keywords for controling program flow and results output:
    - save_* - Specifies whether to save information to output
    - skip_* - Specifies whether to skip a process of group of processes
    - only_* - Only run the pipeline up to this point
*/

// Global default params, used in configs
params {
    // References
    genome                     = null
    spikein_genome             = "K12-MG1655"
    gene_bed                   = null
    save_reference             = false
    only_genome                = false

    // Input and merging
    input                      = null
    save_merged_fastq          = false
    only_input                 = false

    // Pre-align QC
    skip_fastqc                = false
    only_preqc                 = false

    // Trimming
    clip_r1                    = 0
    clip_r2                    = 0
    three_prime_clip_r1        = 0
    three_prime_clip_r2        = 0
    trim_nextseq               = 0
    save_trimmed               = false
    skip_trimming              = false

    // Alignment
    aligner                    = "bowtie2"
    save_spikein_aligned       = false
    save_unaligned             = false
    only_alignment             = false
    save_align_intermed        = false

    // Filtering
    minimum_alignment_q_score  = 0

    // Deduplication
    skip_removeduplicates      = false
    dedup_target_reads         = false
    only_filtering             = false

    // Read Normalisation
    normalisation_mode         = "Spikein"
    normalisation_binsize      = 1
    normalisation_c            = 10000
    igg_scale_factor           = 1

    // Peak Caller default param
    peakcaller                 = 'seacr'

    // SEACR Peak Calling
    use_control                = true
    peak_threshold             = 0.05
    only_peak_calling          = false

    // MACS2 Peak Calling
    macs2_pvalue               = 0.05
    macs_gsize                 = 2.7e9
    macs2_narrow_peak          = true
    macs2_broad_cutoff         = 0.1

    // Consensus Peaks
    consensus_peak_mode        = 'group'
    replicate_threshold        = 1
    skip_upset_plots           = false

    // Frip score
    min_frip_overlap           = 0.20

    // Reporting and Visualisation
    skip_reporting             = false
    skip_igv                   = false
    skip_heatmaps              = false
    skip_multiqc               = false
    skip_frip                  = false
    igv_show_gene_names        = true

    // Boilerplate options
    outdir                     = "./results"
    publish_dir_mode           = "copy"
    multiqc_config             = null
    multiqc_title              = null
    email                      = null
    email_on_fail              = null
    max_multiqc_email_size     = "25.MB"
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    igenomes_base              = "s3://ngi-igenomes/igenomes/"
    tracedir                   = "${params.outdir}/pipeline_info"
    igenomes_ignore            = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes,callers,dedup_control_only,run_igv,run_peak_plotting,run_multiqc,run_deep_tools,run_reporting,run_consensus_all,run_peak_calling,run_remove_dups,run_mark_dups,run_q_filter,run_alignment,run_trim_galore_fastqc,run_cat_fastq,run_input_check,run_genome_prep'
    enable_conda               = false

    // Config options
    custom_config_version      = "master"
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_name        = null
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options
    max_memory                 = "128.GB"
    max_cpus                   = 16
    max_time                   = "240.h"
}

// Load base.config by default for all pipelines
includeConfig "conf/base.config"

// Load resources.config by default for all pipelines
includeConfig "conf/resources.config"

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// // Load nf-core/cutandrun custom config
// try {
//     includeConfig "${params.custom_config_base}/pipeline/cutandrun.config"
// } catch (Exception e) {
//     System.err.println("WARNING: Could not load nf-core/config/cutandrun profiles: ${params.custom_config_base}/pipeline/cutandrun.config")
// }


profiles {
    debug { process.beforeScript = "echo $HOSTNAME" }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        // Avoid this error:
        //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
        // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
        // once this is established and works well, nextflow might implement this behavior as new default.
        docker.runOptions      = "-u \$(id -u):\$(id -g)"
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }

    laptop                    { includeConfig "conf/laptop.config"                    } // Sets up compute resources for local computing run
    test                      { includeConfig "conf/test.config"                      } // Runs a single sample with an IgG control
    test_fasta_only           { includeConfig "conf/test_fasta_only.config"           } // Runs a single sample with an IgG control but with no extra genome files just as bed files and black lists
    test_tech_reps            { includeConfig "conf/test_tech_reps.config"            } // Runs a single sample with two technical replicates and an IgG control
    test_full_small           { includeConfig "conf/test_full_small.config"           } // Runs a full experimental configuration but with a small dataset
    test_no_control           { includeConfig "conf/test_no_control.config"           } // Runs a single sample with NO IgG control
    test_full                 { includeConfig "conf/test_full.config"                 } // Runs a full experimental dataset
    test_full_multi           { includeConfig "conf/test_full_multi.config"           } // Runs a full experimental dataset with extra fake replicates to enable full reporting functionality
    test_local_zip            { includeConfig "conf/test_local_zip.config"            } // Runs a single sample with an IgG control but that targets local, already downloaded compressed input files
    test_full_small_local_zip { includeConfig "conf/test_full_small_local_zip.config" } // Runs a full experimental configuration but with a small dataset but that targets local, already downloaded compressed input files
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ["/bin/bash", "-euo", "pipefail"]

def trace_timestamp = new java.util.Date().format( "yyyy-MM-dd_HH-mm-ss")
timeline {
    enabled = true
    file = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
    fields = "task_id,hash,native_id,name,status,exit,submit,start,complete,duration,realtime,cpus,time,memory,%cpu,peak_rss,peak_vmem,rchar,wchar"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/cutandrun'
    author          = 'Chris Cheshire and Charlotte West'
    homePage        = 'https://github.com/nf-core/cutandrun'
    description     = 'Analysis pipeline for CUT&RUN and CUT&TAG experiments that includes sequencing QC, spike-in normalisation, IgG control normalisation, peak calling and downstream peak analysis.'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version = '2.0.0'
}

// Load flowswitch.config
includeConfig 'conf/flowswitch.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == "memory") {
        try {
        if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
            return params.max_memory as nextflow.util.MemoryUnit
        else
            return obj
        } catch (all) {
        println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
        return obj
        }
    } else if (type == "time") {
        try {
        if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
            return params.max_time as nextflow.util.Duration
        else
            return obj
        } catch (all) {
        println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
        return obj
        }
    } else if (type == "cpus") {
        try {
        return Math.min( obj, params.max_cpus as int )
        } catch (all) {
        println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
        return obj
        }
    }
}
