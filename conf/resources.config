/*
========================================================================================
    nf-core/cutandrun Nextflow resource config file
========================================================================================
    Process-specific resource allocation.
----------------------------------------------------------------------------------------
*/

/*
========================================================================================
    MODULE-SPECIFIC RESOURCE ALLOCATION
========================================================================================
*/

if(params.run_genome_prep) {
    process {
        withName: '.*:PREPARE_GENOME:BLACKLIST_BEDTOOLS_COMPLEMENT' {
            cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
            memory = { check_max( 2.GB  * task.attempt, 'memory'  ) }
            time   = { check_max( 1.h   * task.attempt, 'time'    ) }
        }
    }
}

if(params.run_alignment) {
    withName: '.*:ALIGN_BOWTIE2:BOWTIE2_ALIGN' {
        cpus   = { check_max( 32     * task.attempt, 'cpus'    ) }
        memory = { check_max( 64.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h    * task.attempt, 'time'    ) }
    }

    withName: '.*:ALIGN_BOWTIE2:BOWTIE2_SPIKEIN_ALIGN' {
        cpus   = { check_max( 32     * task.attempt, 'cpus'    ) }
        memory = { check_max( 64.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h    * task.attempt, 'time'    ) }
    }
}

if(params.run_reporting) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:FRAG_LEN_HIST' {
            cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
            memory = { check_max( 32.GB  * task.attempt, 'memory'  ) }
            time   = { check_max( 4.h    * task.attempt, 'time'    ) }
        }
    }
}

if(params.run_reporting && params.run_deeptools_heatmaps) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_COMPUTEMATRIX_GENE' {
            cpus   = { check_max( 16     * task.attempt, 'cpus'    ) }
            memory = { check_max( 64.GB  * task.attempt, 'memory'  ) }
            time   = { check_max( 4.h    * task.attempt, 'time'    ) }
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_COMPUTEMATRIX_PEAKS' {
            cpus   = { check_max( 16     * task.attempt, 'cpus'    ) }
            memory = { check_max( 64.GB  * task.attempt, 'memory'  ) }
            time   = { check_max( 4.h    * task.attempt, 'time'    ) }
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_PLOTHEATMAP_GENE' {
            cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
            memory = { check_max( 64.GB  * task.attempt, 'memory'  ) }
            time   = { check_max( 4.h   * task.attempt, 'time'    ) }
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_PLOTHEATMAP_PEAKS' {
            cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
            memory = { check_max( 64.GB  * task.attempt, 'memory'  ) }
            time   = { check_max( 4.h   * task.attempt, 'time'    ) }
        }
    }
}
