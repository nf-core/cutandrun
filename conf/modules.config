/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

/*
========================================================================================
    GENERAL
========================================================================================
*/

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: "${params.publish_dir_mode}",
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: "${params.publish_dir_mode}",
            pattern: '*_versions.yml'
        ]
    }
}

/*
========================================================================================
    INPUT
========================================================================================
*/

if(params.run_input_check) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:INPUT_CHECK:SAMPLESHEET_CHECK' {
            publishDir = [
                path: { "${params.outdir}/pipeline_info" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

/*
========================================================================================
    GENOME PREPARATION
========================================================================================
*/

if(params.run_genome_prep) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PREPARE_GENOME:UNTAR_.*' {
            ext.args2 = '--no-same-owner'
        }

        withName: '.*PREPARE_GENOME:GUNZIP_.*' {
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*PREPARE_GENOME:TABIX_BGZIPTABIX' {
            publishDir = [
                path: { "${params.outdir}/00_genome/annotation" },
                mode: "${params.publish_dir_mode}",
                enabled: params.save_reference
            ]
        }

        withName: '.*CHROMSIZES' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'UNTAR_INDEX_.*|TARGET|SPIKEIN' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'BOWTIE2_BUILD_.*|TARGET|SPIKEIN' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: '.*PREPARE_GENOME:SAMTOOLS_FAIDX' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PREPARE_GENOME:ANNOTATION_BEDTOOLS_SORT' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                path: { "${params.outdir}/00_genome/annotation" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }
}

if (params.run_genome_prep && params.blacklist) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PREPARE_GENOME:BLACKLIST_AWK' {
            ext.command = "'{OFS = \"\\t\"} {print \$1, '0', \$2}'"
            ext.ext     = "bed"
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PREPARE_GENOME:BLACKLIST_BEDTOOLS_SORT' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PREPARE_GENOME:BLACKLIST_BEDTOOLS_INTERSECT' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PREPARE_GENOME:BLACKLIST_BEDTOOLS_COMPLEMENT' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }
}

if (params.run_genome_prep && !params.gene_bed) {
    process {
        withName: '.*PREPARE_GENOME:GTF2BED' {
            publishDir = [
                path: { "${params.outdir}/00_genome/annotation" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }
}

/*
========================================================================================
    PRE-ALIGNMENT
========================================================================================
*/

if(params.run_cat_fastq) {
    process {
        withName: 'CAT_FASTQ' {
            publishDir = [
                path: { "${params.outdir}/01_prealign/merged_fastq" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_merged_fastq
            ]
        }
    }
}

if(params.run_trim_galore_fastqc && !params.skip_fastqc) {
    process {
        withName: '.*:FASTQC_TRIMGALORE:FASTQC' {
            ext.args   = '--quiet'
            publishDir = [
                path: { "${params.outdir}/01_prealign/pretrim_fastqc" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    }
}

if(params.run_trim_galore_fastqc && !params.skip_trimming) {
    process {
        withName: '.*:FASTQC_TRIMGALORE:TRIMGALORE' {
            ext.args   = [
                '--fastqc',
                params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/01_prealign/trimgalore/fastqc" },
                    mode: "${params.publish_dir_mode}",
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/01_prealign/trimgalore" },
                    mode: "${params.publish_dir_mode}",
                    pattern: "*.fastq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/01_prealign/trimgalore" },
                    mode: "${params.publish_dir_mode}",
                    pattern: "*.txt"
                ]
            ]
        }
    }
}

/*
========================================================================================
    ALIGNMENT
========================================================================================
*/

if(params.run_alignment) {
    process {
        withName: '.*:ALIGN_BOWTIE2:BOWTIE2_TARGET_ALIGN' {
            ext.args   = { params.skip_trimming ? '--end-to-end --very-sensitive --no-mixed --no-discordant --phred33 --minins 10 --maxins 700 --dovetail' : '--local --very-sensitive --no-mixed --no-discordant --phred33 --minins 10 --maxins 700 --dovetail' }
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/${params.aligner}/target/log" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.log'
                ],
                [
                    path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.bam',
                    enabled: ( params.save_align_intermed || (!params.run_read_filter && !params.run_mark_dups && !params.run_remove_dups) )
                ],
                [
                    path: { "${params.outdir}/02_alignment/${params.aligner}/target/unmapped" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned
                ]
            ]
        }

        withName: '.*:ALIGN_BOWTIE2:BOWTIE2_SPIKEIN_ALIGN' {
            ext.args   = { params.skip_trimming ? '--end-to-end --very-sensitive --no-overlap --no-dovetail --no-mixed --no-discordant --phred33 --minins 10 --maxins 700' : '--local --very-sensitive --no-overlap --no-dovetail --no-mixed --no-discordant --phred33 --minins 10 --maxins 700' }
            ext.prefix = { "${meta.id}.spikein" }
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/${params.aligner}/spikein/log" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.log'
                ],
                [
                    path: { "${params.outdir}/02_alignment/${params.aligner}/spikein" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.bam',
                    enabled: params.save_spikein_aligned
                ],
                [
                    path: { "${params.outdir}/02_alignment/${params.aligner}/spikein/unmapped" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.fastq.gz',
                    enabled: ( params.save_spikein_aligned && params.save_unaligned )
                ]
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:.*:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}",
                enabled: ( params.save_align_intermed || (!params.run_read_filter && !params.run_mark_dups && !params.run_remove_dups) )
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:.*:BAM_SORT_STATS_SAMTOOLS_SPIKEIN:BAM_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/spikein" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}",
                enabled: params.save_spikein_aligned
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.target.sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bam",
                enabled: ( params.save_align_intermed || (!params.run_read_filter && !params.run_mark_dups && !params.run_remove_dups) )
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:.*:BAM_SORT_STATS_SAMTOOLS_SPIKEIN:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.spikein.sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/spikein" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bam",
                enabled: params.save_spikein_aligned
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
            ext.prefix = { "${meta.id}.target.sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bai",
                enabled: ( params.save_align_intermed || (!params.run_read_filter && !params.run_mark_dups && !params.run_remove_dups) )
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:.*:BAM_SORT_STATS_SAMTOOLS_SPIKEIN:SAMTOOLS_INDEX' {
            ext.prefix = { "${meta.id}.spikein.sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/spikein" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bai",
                enabled: params.save_spikein_aligned
            ]
        }
    }
}

/*
========================================================================================
    READ-FILTERING
========================================================================================
*/

if(params.run_read_filter) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:FILTER_READS:SAMTOOLS_VIEW' {
            ext.args = "-b -q ${params.minimum_alignment_q_score} -F 0x004 -F 0x0008 -f 0x001"
            ext.prefix = { "${meta.id}.target.filtered" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bam",
                enabled: ( params.save_align_intermed || (!params.run_mark_dups && !params.run_remove_dups) )
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:FILTER_READS:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.target.filtered.sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bam",
                enabled: ( params.save_align_intermed || (!params.run_mark_dups && !params.run_remove_dups) )
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:FILTER_READS:SAMTOOLS_INDEX' {
            ext.prefix = { "${meta.id}.target.filtered" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bai",
                enabled: ( params.save_align_intermed || (!params.run_mark_dups && !params.run_remove_dups) )
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:FILTER_READS:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.target.filtered" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}",
                enabled: ( params.save_align_intermed || (!params.run_mark_dups && !params.run_remove_dups) )
            ]
        }
    }
}

/*
========================================================================================
    PRESEQ
========================================================================================
*/

if (params.run_preseq) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PRESEQ_LCEXTRAP' {
            ext.args = "-v -B"
            publishDir = [
                path: { "${params.outdir}/04_reporting/preseq" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{log,txt}",
            ]
        }
    }
}

/*
========================================================================================
    DUPLICATES
========================================================================================
*/

if(params.run_mark_dups) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
            ext.args = "--ASSUME_SORT_ORDER coordinate --REMOVE_DUPLICATES false --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp"
            ext.prefix = { "${meta.id}.target.markdup" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target/markdup" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bam",
                enabled: false
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:MARK_DUPLICATES_PICARD:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.target.markdup.sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target/markdup" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bam",
                enabled: params.run_mark_dups
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:MARK_DUPLICATES_PICARD:BAM_SORT_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target/markdup" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats,bam,bai}",
                enabled: params.run_mark_dups
            ]
        }
    }
}

if(params.run_remove_dups) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEDUPLICATE_PICARD:PICARD_MARKDUPLICATES' {
            ext.args = "--ASSUME_SORT_ORDER coordinate --REMOVE_DUPLICATES true --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp"
            ext.prefix = { "${meta.id}.target.dedup" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target/dedup" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bam",
                enabled: false
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEDUPLICATE_PICARD:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.target.dedup.sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target/dedup" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bam",
                enabled: params.run_remove_dups
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEDUPLICATE_PICARD:BAM_SORT_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target/dedup" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats,bam,bai}",
                enabled: params.run_remove_dups
            ]
        }
    }
}

/*
========================================================================================
    ANNOTATE META WITH ALIGN AND DUP STATS
========================================================================================
*/

if (params.run_alignment) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:EXTRACT_BT2_TARGET_META:AWK_SCRIPT' {
            ext.suffix = "_meta_bt2_target"
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:EXTRACT_BT2_SPIKEIN_META:AWK_SCRIPT' {
            ext.suffix = "_meta_bt2_spikein"
            publishDir = [
                enabled: false
            ]
        }
    }
}

if (params.run_mark_dups) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:EXTRACT_PICARD_DUP_META:AWK' {
            ext.suffix = "_meta_picard_dups"
            ext.command = "'/^[^#]/{print}'"
            ext.command2 = " > int1.txt && head -2 int1.txt > int2.txt && sed 's/\\t/,/g' int2.txt > int3.txt && sed 's/.*/\\L&/g' int3.txt "
            publishDir = [
                enabled: false
            ]
        }
    }
}

/*
========================================================================================
    SCALING/CONVERSION AND PEAK CALLING
========================================================================================
*/

if(params.run_peak_calling && (params.normalisation_mode == "Spikein" || params.normalisation_mode == "None")) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PREPARE_PEAKCALLING:BEDTOOLS_GENOMECOV' {
            ext.args = params.extend_fragments ? '-bg -pc' : '-bg'
            publishDir = [
                enabled: false
            ]
        }
    }
}

if(params.run_peak_calling && (params.normalisation_mode != "Spikein" && params.normalisation_mode != "None")) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PREPARE_PEAKCALLING:DEEPTOOLS_BAMCOVERAGE' {
            ext.args   = [
                '--outFileFormat bedgraph',
                '--skipNAs',
                "--binSize ${params.normalisation_binsize}",
                "--normalizeUsing ${params.normalisation_mode}",
                params.extend_fragments ? '--extendReads' : '',
            ].join(' ').trim()
            ext.prefix = { "${meta.id}.bedgraph" }
            publishDir = [
                enabled: false
            ]
        }
    }
}

if(params.run_peak_calling) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PREPARE_PEAKCALLING:BEDTOOLS_SORT' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                path: { "${params.outdir}/03_peak_calling/01_bam_to_bedgraph" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bedGraph",
                enabled: true
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PREPARE_PEAKCALLING:UCSC_BEDCLIP' {
            ext.prefix = { "${meta.id}.clipped" }
            publishDir = [
                path: { "${params.outdir}/03_peak_calling/02_clip_bed" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bedGraph",
                enabled: true
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PREPARE_PEAKCALLING:UCSC_BEDGRAPHTOBIGWIG' {
            publishDir = [
                path: { "${params.outdir}/03_peak_calling/03_bed_to_bigwig" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bigWig",
                enabled: true
            ]
        }
    }
}

if(params.run_peak_calling && 'seacr' in params.callers) {
    process {
        withName: '.*:CUTANDRUN:SEACR_.*' {
            ext.args   = "${params.seacr_norm} ${params.seacr_stringent}"
            ext.prefix = { "${meta.id}.seacr.peaks" }
            publishDir = [
                path: { "${params.outdir}/03_peak_calling/04_called_peaks/seacr" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.bed",
                enabled: true
            ]
        }
    }
}

if(params.run_peak_calling && 'macs2' in params.callers) {
    process {
        withName: '.*:CUTANDRUN:MACS2_.*' {
            ext.args   = [
                "--nomodel --shift -75 --extsize 150 --keep-dup all ",
                params.macs2_pvalue ? "-p ${params.macs2_pvalue}" : "-q ${params.macs2_qvalue}",
                params.macs2_narrow_peak ? '' : "--broad --broad-cutoff ${params.macs2_broad_cutoff}"
            ].join(' ').trim()
            ext.prefix = { "${meta.id}.macs2" }
            publishDir = [
                path: { "${params.outdir}/03_peak_calling/04_called_peaks/macs2" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{bed,narrowPeak,broadPeak,xls}",
                enabled: true
            ]
        }
    }
}

if(params.run_peak_calling && 'macs2' in params.callers) {
    process {
        withName: '.*:CUTANDRUN:PEAK_TO_BED' {
            ext.args    = "-f 1-6"
            ext.ext     = "bed"
            ext.suffix  = ".macs2.peaks"
            publishDir  = [
                path: { "${params.outdir}/03_peak_calling/04_called_peaks/macs2" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
    }
}

if(params.run_peak_calling && params.callers[0] == 'seacr') {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:AWK_EXTRACT_SUMMITS' {
            ext.command = "'{split(\$6, summit, \":\"); split(summit[2], region, \"-\"); print summit[1]\"\\t\"region[1]\"\\t\"region[2]}'"
            ext.suffix  = ".max_signal"
            publishDir  = [
                enabled: false
            ]
        }
    }
}

/*
========================================================================================
    CONSENSUS PEAKS
========================================================================================
*/

if(params.run_peak_calling) {
    process {
        withName: '.*:AWK_NAME_PEAK_BED' {
            ext.command = "'{OFS = \"\\t\"} {print \$0, FILENAME}'"
            ext.ext     = "bed"
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*:CONSENSUS_PEAKS:SORT|.*:CONSENSUS_PEAKS_ALL:SORT' {
            ext.args   = "-k1,1 -k2,2n"
            ext.ext    = "bed"
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*:CONSENSUS_PEAKS:BEDTOOLS_MERGE|.*:CONSENSUS_PEAKS_ALL:BEDTOOLS_MERGE' {
            ext.args   = " -c 2,3,4,5,6,7,7 -o collapse,collapse,collapse,collapse,collapse,collapse,count_distinct"
            ext.prefix = { "${meta.id}.consensus.peak_counts" }
            publishDir = [
                path: { "${params.outdir}/03_peak_calling/05_consensus_peaks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }

        withName: '.*:CONSENSUS_PEAKS:AWK|.*:CONSENSUS_PEAKS_ALL:AWK' {
            ext.command = "' \$10 >= " + params.replicate_threshold.toString() + " {print \$0}'"
            ext.ext     = "bed"
            ext.suffix  = ".consensus.peaks"
            publishDir  = [
                path: { "${params.outdir}/03_peak_calling/05_consensus_peaks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
    }
}

/*
========================================================================================
    REPORTING
========================================================================================
*/

if(params.run_reporting && params.run_igv) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:IGV_SESSION' {
            publishDir   = [
                path: { "${params.outdir}/04_reporting/igv" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
    }
}

if(params.run_reporting && params.run_deeptools_heatmaps) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_COMPUTEMATRIX_GENE' {
            ext.args = "scale-regions --beforeRegionStartLength ${params.dt_heatmap_gene_beforelen} --regionBodyLength ${params.dt_heatmap_gene_bodylen} --afterRegionStartLength ${params.dt_heatmap_gene_afterlen} --skipZeros --missingDataAsZero"
            publishDir   = [
                path: { "${params.outdir}/04_reporting/deeptools_heatmaps/gene" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_PLOTHEATMAP_GENE' {
            ext.args = "--sortUsing sum"
            publishDir   = [
                path: { "${params.outdir}/04_reporting/deeptools_heatmaps/gene" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_COMPUTEMATRIX_PEAKS' {
            ext.args = "reference-point -a ${params.dt_heatmap_peak_beforelen} -b ${params.dt_heatmap_peak_afterlen} --referencePoint center --skipZeros --missingDataAsZero"
            publishDir   = [
                path: { "${params.outdir}/04_reporting/deeptools_heatmaps/peaks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_PLOTHEATMAP_PEAKS' {
            ext.args = "--sortUsing sum --startLabel \"Peak Start\" --endLabel \"Peak End\" --xAxisLabel \"\" --regionsLabel \"Peaks\""
            publishDir   = [
                path: { "${params.outdir}/04_reporting/deeptools_heatmaps/peaks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
    }
}

if(params.run_reporting && params.run_deeptools_heatmaps && params.dt_calc_all_matrix) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_COMPUTEMATRIX_GENE_ALL' {
            ext.args = "scale-regions --beforeRegionStartLength ${params.dt_heatmap_gene_beforelen} --regionBodyLength ${params.dt_heatmap_gene_bodylen} --afterRegionStartLength ${params.dt_heatmap_gene_afterlen} --skipZeros --missingDataAsZero"
            publishDir   = [
                path: { "${params.outdir}/04_reporting/deeptools_heatmaps/gene_all" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }

        // withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_COMPUTEMATRIX_PEAKS_ALL' {
        //     ext.args = "reference-point -a ${params.dt_heatmap_peak_beforelen} -b ${params.dt_heatmap_peak_afterlen} --referencePoint center --skipZeros --missingDataAsZero"
        //     publishDir   = [
        //         path: { "${params.outdir}/04_reporting/deeptools_heatmaps/peaks_all" },
        //         mode: "${params.publish_dir_mode}",
        //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        //         enabled: true
        //     ]
        // }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_PLOTHEATMAP_GENE_ALL' {
            ext.args = "--sortUsing sum"
            publishDir   = [
                path: { "${params.outdir}/04_reporting/deeptools_heatmaps/gene_all" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }

        // withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_PLOTHEATMAP_PEAKS_ALL' {
        //     ext.args = "--sortUsing sum --legendLocation best"
        //     publishDir   = [
        //         path: { "${params.outdir}/04_reporting/deeptools_heatmaps/peaks_all" },
        //         mode: "${params.publish_dir_mode}",
        //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        //         enabled: true
        //     ]
        // }
    }
}

if(params.run_reporting && params.run_deeptools_qc) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_QC:DEEPTOOLS_MULTIBAMSUMMARY' {
                ext.args = "--smartLabels --binSize ${params.dt_qc_bam_binsize}"
                publishDir   = [
                    path: { "${params.outdir}/04_reporting/deeptools_qc" },
                    mode: "${params.publish_dir_mode}",
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: true
                ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_QC:DEEPTOOLS_PLOTCORRELATION' {
                ext.args = "--skipZeros --removeOutliers"
                publishDir   = [
                    path: { "${params.outdir}/04_reporting/deeptools_qc" },
                    mode: "${params.publish_dir_mode}",
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: true
                ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_QC:DEEPTOOLS_PLOTPCA' {
                ext.args = ""
                publishDir   = [
                    path: { "${params.outdir}/04_reporting/deeptools_qc" },
                    mode: "${params.publish_dir_mode}",
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: true
                ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_QC:DEEPTOOLS_PLOTFINGERPRINT' {
                ext.args = "--skipZeros"
                publishDir   = [
                    path: { "${params.outdir}/04_reporting/deeptools_qc" },
                    mode: "${params.publish_dir_mode}",
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: true
                ]
        }
    }
}

if (params.run_reporting && params.run_peak_qc) {
    process {
        withName: '.*:EXTRACT_FRAGMENTS:SAMTOOLS_SORT' {
            ext.args = "-n"
            ext.prefix = { "${meta.id}.sortedbyname" }
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*:EXTRACT_FRAGMENTS:BEDTOOLS_BAMTOBED' {
            ext.args = "-bedpe"
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*:EXTRACT_FRAGMENTS:AWK' {
            ext.command = "'\$1==\$4 && \$6-\$2 < 1000 {print \$0}'"
            ext.suffix = ".filt"
            ext.ext    = "bed"
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*:EXTRACT_FRAGMENTS:CUT' {
            ext.args    = "-f 1,2,6"
            ext.command = "| sort -T '.' -k1,1 -k2,2n -k3,3n"
            ext.suffix  = ".frags"
            ext.ext     = "bed"
            publishDir  = [
                path: { "${params.outdir}/03_peak_calling/06_fragments_from_bams" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PEAK_QC:PEAK_FRIP' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PEAK_QC:PRIMARY_PEAK_COUNTS' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PEAK_QC:CONSENSUS_PEAK_COUNTS' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PEAK_QC:CUT_CALC_REPROD' {
            ext.args   = "-f 1,2,3,6"
            ext.suffix = ".repro"
            ext.ext    = "bed"
            publishDir  = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PEAK_QC:BEDTOOLS_INTERSECT' {
            ext.args   = "-C -sorted -f ${params.min_peak_overlap}"
            publishDir  = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PEAK_QC:CALCULATE_PEAK_REPROD' {
            publishDir  = [
                enabled: false
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PEAK_QC:PLOT_CONSENSUS_PEAKS' {
            publishDir = [
                path: { "${params.outdir}/04_reporting/consensus_upset_plots" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
    }
}

if(params.run_reporting) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:SAMTOOLS_CUSTOMVIEW' {
            ext.args     = "-F 0x04"
            ext.args2    = "awk -F'\\t' 'function abs(x){return ((x < 0.0) ? -x : x)} {print abs(\$9)}' | sort -T '.' | uniq -c | awk -v OFS=\"\\t\" '{print \$2, \$1/2}'"
            ext.suffix   = ".frags.len"
            publishDir   = [
                path: { "${params.outdir}/03_peak_calling/06_fragments_from_bams" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:FRAG_LEN_HIST' {
            publishDir  = [
                enabled: false
            ]
        }
    }
}

if (params.run_multiqc) {
    process {
        withName: "NFCORE_CUTANDRUN:CUTANDRUN:MULTIQC" {
            ext.args   = params.multiqc_title ? "-v --title \"$params.multiqc_title\"" : '-v'
            publishDir = [
                path: { "${params.outdir}/04_reporting/multiqc" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

